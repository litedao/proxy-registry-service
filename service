#! /usr/bin/env node

const mongoose = require('./schema.js').mongoose;
const settings = require('./settings');

let network = 'main';
let port = 4000;
process.argv.forEach((v, i) => {
  if (v === '--network' && typeof process.argv[i + 1] !== 'undefined') {
    network = process.argv[i + 1];
  }
  if (v === '--port' && typeof process.argv[i + 1] !== 'undefined') {
    port = process.argv[i + 1];
  }
});

const db = `proxy-directory-${network}${settings.version ? `-${settings.version}` : ''}`;
mongoose.connect(`mongodb://localhost/${db}`, { useMongoClient: true }, (e) => {
  if (!e) {
    var http = require('http');

    http.createServer((req, res) => {
      let ret = '';
      const p = prom(req.url);
      Promise.resolve(p).then((ret) => {
        res.setHeader('Access-Control-Allow-Origin', settings.cors);
        res.writeHead(200, {'Content-Type': 'application/json'});
        res.end(JSON.stringify(ret));
      });
    }).listen(port);
  }
});
console.log(`Server running on port ${port}, reading from DB: ${db}`);

const prom = (url) => {
  const p = new Promise((resolve, reject) => {
    const urlParts = url.split('/');

    const conditions = {};
    const sort = {};
    let skip = 0;
    let limit = null;
    for (i=1; i < urlParts.length; i++) {
      if (urlParts[i].indexOf('=') !== -1) {
        const param = urlParts[i].split('=');
        if (['conditions', 'sort', 'skip', 'limit'].indexOf(param[0]) !== -1) {
          if (param[0] === 'conditions') {
            param[1].split('&').forEach((v) => {
              const keyVal = v.split(':');
              if (keyVal.length === 2) {
                const value = keyVal[1].match(/^\d+$/) ? parseInt(keyVal[1], 10) : (keyVal[1] === 'true' ? true : (keyVal[1] === 'false' ? false : keyVal[1]));
                const index = keyVal[0].replace('.gte', '').replace('.gt', '').replace('.lte', '').replace('.lt', '');
                if (typeof conditions[index] === 'undefined') { conditions[index] = {}; }
                if (keyVal[0].indexOf('.gte') !== -1) {
                  conditions[index]['$gte'] = value;
                } else if (keyVal[0].indexOf('.gt') !== -1) {
                  conditions[index]['$gt'] = value;
                } else if (keyVal[0].indexOf('.lte') !== -1) {
                  conditions[index]['$lte'] = value;
                } else if (keyVal[0].indexOf('.lt') !== -1) {
                  conditions[index]['$lt'] = value;
                } else {
                  conditions[keyVal[0]] = value;
                }
              }
            });
          } else if (param[0] === 'sort') {
            param[1].split('&').forEach((v) => {
              const keyVal = v.split(':');
              if (keyVal.length === 2 && (keyVal[1] === 'asc' || keyVal[1] === 'desc')) {
                const value = keyVal[1] === 'asc' ? 1 : -1;
                const index = keyVal[0];
                sort[index] = value;
              }
            });
          } else if (param[0] === 'skip' && parseInt(param[1], 10) > 0) {
            skip = parseInt(param[1], 10);
          } else if (param[0] === 'limit' && parseInt(param[1], 10) > 0) {
            limit = parseInt(param[1], 10);
          }
        }
      }
    }

    let query = mongoose.model('Directory').collection.find(conditions).sort(sort ? sort : { 'timestamp': 1 });
      query.count((e, r) => {
        if (!e) {
          if (skip && skip > 0) { query = query.skip(skip); }
          if (limit && limit > 0) { query = query.limit(limit); }
          query.toArray((e2, r2) => {
            if (!e) {
              mongoose.model('Directory').collection.find().sort({ 'blockNumber': -1 }).limit(1).toArray((e3, r3) => {
                if (!e3) {
                  resolve({ lastBlockNumber: r3 && r3[0] ? r3[0].blockNumber : 0, total: r, results: r2 });
                } else {
                  reject(e3);
                }
              });
            } else {
              reject(e2);
            }
          });
        } else {
          reject(e);
        }
      });
  });
  return p;
}
